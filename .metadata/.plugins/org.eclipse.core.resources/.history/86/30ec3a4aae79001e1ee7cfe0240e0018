package service.controllers;

import java.net.InetAddress;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import service.broker.LocalBrokerService;
import service.core.Application;
import service.core.ClientInfo;
import service.core.Quotation;

@RestController
public class QuotationController {
	private int id = 1000;
	private Map<Integer, Application> applicationMap = new TreeMap<>();
	//private LocalBrokerService service = new LocalBrokerService();
	private final String[] urls = {"http://localhost:8080/quotations", "http://localhost:8081/quotations", "http://localhost:8082/quotations"};
	
	
	@Value("${server.port}")
	private int port;

	@GetMapping(value = "/applications", produces = "application/json")
    public ResponseEntity<Collection<Application>> getApplications() {
        return ResponseEntity.status(HttpStatus.OK).body(applicationMap.values());
    }
	
	@GetMapping(value = "/applications/{id}", produces = "application/json")
    public ResponseEntity<Application> getApplication(@PathVariable Integer id) {
        Application application = applicationMap.get(id);
        if (application == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        System.out.println("Inside application get method");
        return ResponseEntity.status(HttpStatus.OK).body(application);
    }
	
	 @PostMapping(value = "/applications", consumes = "application/json")
	    public ResponseEntity<Application> createApplication(@RequestBody ClientInfo clientInfo) {
	        List<Quotation> quotations = new ArrayList<>();

	        // Make POST requests to all quotation services
	        quotations.add(getQuotation("http://auldfellas:8081/quotations", clientInfo));
	        quotations.add(getQuotation("http://dodgygeezers:8082/quotations", clientInfo));
	        quotations.add(getQuotation("http://girlsallowed:8083/quotations", clientInfo));

	        Application application = new Application(clientInfo);
	        applicationMap.put(id, application);

	        HttpHeaders httpHeaders = new HttpHeaders();
	        String path = ServletUriComponentsBuilder.fromCurrentContextPath().build().toUriString() + "/quotations/" + id;

	        try {
	            httpHeaders.setLocation(new URI(path));
	        } catch (URISyntaxException e) {
	            e.printStackTrace();
	        }

	        return new ResponseEntity<>(application, httpHeaders, HttpStatus.CREATED);
	    }

	    // Helper method to make a POST request to a quotation service
	    private Quotation getQuotation(String serviceUrl, ClientInfo clientInfo) {
	        ResponseEntity<Quotation> response = restTemplate.postForEntity(serviceUrl, clientInfo, Quotation.class);

	        if (response.getStatusCode() == HttpStatus.CREATED) {
	            return response.getBody();
	        } else {
	            // Handle the case when the request to the quotation service fails
	            return null; // You can return a default or error quotation in this case
	        }
	    }
	}

	
	public List<Quotation> getQuotations(ClientInfo info) {
        RestTemplate restTemplate = new RestTemplate();
        List<Quotation> quotationsList = new ArrayList<>();
        for (String url : urls) {
        	System.out.println("Url is: " + url);
            ResponseEntity<Quotation> response = restTemplate.postForEntity(url, info, Quotation.class);
            if (response.getStatusCode().equals(HttpStatus.OK)) {
            	System.out.println("Inside getQuotation method");
                Quotation quotation = response.getBody();
                System.out.println("Response is: " + quotation);
                quotationsList.add(quotation);
            }
        }
        return quotationsList;
    }

    

	private String getHost() {
		try {
			return InetAddress.getLocalHost().getHostAddress() + ":" + port;
		} catch (UnknownHostException e) {
			return "localhost:" + port;
		}
	}
}
