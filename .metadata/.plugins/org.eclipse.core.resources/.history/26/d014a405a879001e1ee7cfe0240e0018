package service.controllers;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import service.broker.LocalBrokerService;
import service.core.Application;
import service.core.ClientInfo;
import service.core.Quotation;

@RestController
public class QuotationController {
	private Map<Integer, Application> applicationMap = new TreeMap<>();
	private LocalBrokerService service = new LocalBrokerService();
	
	
	@Value("${server.port}")
	private int port;

	@GetMapping(value = "/applications", produces = "application/json")
    public ResponseEntity<Collection<Application>> getApplications() {
        return ResponseEntity.status(HttpStatus.OK).body(applicationMap.values());
    }
	
	@GetMapping(value = "/applications/{id}", produces = "application/json")
    public ResponseEntity<Application> getApplication(@PathVariable Integer id) {
        Application application = applicationMap.get(id);
        if (application == null) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
        }
        System.out.println("Inside application get method");
        return ResponseEntity.status(HttpStatus.OK).body(application);
    }
	
	@PostMapping(value = "/applications", consumes = "application/json")
    public ResponseEntity<Application> createApplication(@RequestBody ClientInfo info) {
        List<Quotation> quotations = service.getQuotations(info);
        Application application = new Application(info);
        applicationMap.put(application.getId(), application);
        String url = "http://" + getHost() + "/applications/" + application.getId();
        return ResponseEntity.status(HttpStatus.CREATED).header("Location", url).header("Content-Location", url).body(application);
    }

    

	private String getHost() {
		try {
			return InetAddress.getLocalHost().getHostAddress() + ":" + port;
		} catch (UnknownHostException e) {
			return "localhost:" + port;
		}
	}
}
